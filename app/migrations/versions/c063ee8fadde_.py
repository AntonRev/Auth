"""empty message

Revision ID: c063ee8fadde
Revises: 
Create Date: 2023-05-25 23:01:46.849396

"""
from alembic import op
import sqlalchemy as sa
from uuid import uuid4
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c063ee8fadde'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('requare',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('login', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('password', sa.String(length=100), nullable=False),
    sa.Column('data_create', sa.DateTime(), nullable=True),
    sa.Column('auth_two_factor', sa.Boolean(), nullable=True),
    sa.Column('age_user', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'age_user'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id', 'age_user')
    )
    op.create_table('auth',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('auth_token', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('permission',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role_user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'role_id', 'user_id')
    )
    op.create_table('totp',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('two_factor_secrets', sa.String(length=80), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('two_factor_secrets')
    )
    op.create_table('ua',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('ua', sa.String(length=250), nullable=True),
    sa.Column('data', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    with op.batch_alter_table('ua', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ua_data'), ['data'], unique=False)

    op.create_table('req_permissions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('permission_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('req_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['req_id'], ['requare.id'], ),
    sa.PrimaryKeyConstraint('id', 'permission_id', 'req_id')
    )
    op.create_table('user_permissions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('permission_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'permission_id', 'user_id')
    )
    op.execute(f"INSERT INTO role (id, name, description) values('{uuid4()}', 'user', 'Default user')")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_permissions')
    op.drop_table('req_permissions')
    with op.batch_alter_table('ua', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ua_data'))

    op.drop_table('ua')
    op.drop_table('totp')
    op.drop_table('role_user')
    op.drop_table('permission')
    op.drop_table('auth')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('requare')
    # ### end Alembic commands ###
